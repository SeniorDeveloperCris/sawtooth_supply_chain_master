// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";


message Property {
  message Reporter {
    // The public key of the Agent authorized to report updates.
    string public_key = 1;
    bool authorized = 2;
    // An update must be stored with some way of identifying which
    // Agent sent it. Storing a full public key for each update would
    // be wasteful, so instead Reporters are identified by their index
    // in the `reporters` field.
    uint32 index = 3;
  }

  // The name of the Property, e.g. "temperature". This must be unique
  // among Properties.
  string name = 1;

  // The natural key of the Property's associated Record.
  string record_id = 2;

  // The Property's type (int, string, etc.)
  PropertySchema.DataType data_type = 3;

  // The Reporters authorized to send updates, sorted by index. New
  // Reporters should be given an index equal to the number of
  // Reporters already authorized.
  repeated Reporter reporters = 4;

  // The page to which new updates are added. This number represents
  // the last 4 hex characters of the page's address. Consequently,
  // it should not exceed 16^4 = 65536.
  uint32 current_page = 5;

  // A flag indicating whether the first 16^4 pages have been filled.
  // This is used to calculate the last four hex characters of the
  // address of the page containing the earliest updates. When it is
  // false, the earliest page's address will end in "0001". When it is
  // true, the earliest page's address will be one more than the
  // current_page, or "0001" if the current_page is "ffff".
  bool wrapped = 6;

  // If set to true, values may only be set for this Property
  // during Record creation, not later with updates.
  bool fixed = 9;

  // Used with numbers to communicate how the integer value should be converted
  // to a fractional number. Uses the same principle as scientific notation.
  // A number value of 1, with an exponent of 3, would be 1,000 (1 * 10^3).
  // A number value of 1, with an exponent of -3, would be 0.001 (1 * 10^-3).
  sint32 number_exponent = 10;

  // Used with ENUM data types, the string names of available options
  repeated string enum_options = 11;

  // Used with STRUCT data types, defines the properties a struct must contain
  repeated PropertySchema struct_properties = 12;

  // This optional metadata describes the unit a Property is measured in
  string unit = 20;
}


message PropertyContainer {
  repeated Property entries = 1;
}


message PropertySchema {
  enum DataType {
    TYPE_UNSET = 0;
    BYTES = 1;
    BOOLEAN = 2;
    NUMBER = 3;
    STRING = 4;
    ENUM = 5;
    STRUCT = 6;
    LOCATION = 7;
  }

  // The name of the property, e.g. "temperature"
  string name = 1;

  // The Property's type (int, string, etc.)
  DataType data_type = 2;

  // A flag indicating whether initial values must be provided for the
  // Property when a Record is created.
  bool required = 3;

  // Another flag. If set to true, values may only be set for this Property
  // during Record creation, not later with updates.
  bool fixed = 4;

  // A flag that indicates a property may not be set at record creation,
  // only later during subsequent property updates.
  bool delayed = 5;

  // Used with numbers to communicate how the integer value should be converted
  // to a fractional number. Uses the same principle as scientific notation.
  // A number value of 1, with an exponent of 3, would be 1,000 (1 * 10^3).
  // A number value of 1, with an exponent of -3, would be 0.001 (1 * 10^-3).
  sint32 number_exponent = 10;

  // Used with ENUM data types, the string names of available options
  repeated string enum_options = 11;

  // Used with STRUCT data types, defines the properties a struct must contain
  repeated PropertySchema struct_properties = 12;

  // This optional metadata describes the unit a Property is measured in
  string unit = 20;
}


message PropertyValue {
  // The name of the property being set
  string name = 1;

  // The PropertyValue's type (int, string, etc.)
  PropertySchema.DataType data_type = 2;

  // The type-specific value to initialize or update a Property. Only
  // one of these fields should be used, and it should match the type
  // specified for this Property in the RecordType.
  bytes bytes_value = 11;
  bool boolean_value = 12;
  sint64 number_value = 13;
  string string_value = 14;
  string enum_value = 15;
  repeated PropertyValue struct_values = 16;
  Location location_value = 17;
}


message PropertyPage {
  message ReportedValue {
    // The index of the reporter id in reporters field
    uint32 reporter_index = 1;
    // Approximately when this value was reported, as a Unix UTC
    // timestamp
    uint64 timestamp = 2;

    // The type-specific value of the update. Only one of these
    // fields should be used, and it should match the type
    // specified for this Property in the RecordType.
    bytes bytes_value = 11;
    bool boolean_value = 12;
    sint64 number_value = 13;
    string string_value = 14;
    uint32 enum_value = 15;
    repeated PropertyValue struct_values = 16;
    Location location_value = 17;
  }

  // The name of the page's associated Property and the record_id of
  // its associated Record. These are required to distinguish pages
  // with colliding addresses.
  string name = 1;
  string record_id = 2;

  // ReportedValues are sorted first by timestamp, then by
  // reporter_index
  repeated ReportedValue reported_values = 3;
}


message PropertyPageContainer {
  repeated PropertyPage entries = 1;
}


message Location {
  // Coordinates are expected to be in millionths of a degree
  sint64 latitude = 1;
  sint64 longitude = 2;
}
